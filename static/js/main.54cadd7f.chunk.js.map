{"version":3,"sources":["redux/constants.js","components/AddWordForm.js","components/ChangeLang.js","components/WordsItem.js","components/Words.js","components/ContextMenu.js","components/Form.js","components/PhrasesList.js","components/Modal.js","components/ModalError.js","components/PhrasesHeader.js","components/PhrasesModal.js","components/Complexity.js","components/Toggler.js","components/Toggleable.js","components/WordsAmount.js","components/Header.js","lib/array-helpers.js","components/Containers.js","redux/actionCreators.js","components/Complexities.js","components/App.js","redux/reducers.js","redux/store.js","index.js"],"names":["AddWordForm","_english","_russian","_complexity","onNewWord","f","className","onSubmit","e","preventDefault","engWord","value","toLowerCase","trim","rusWord","complexity","focus","type","ref","input","placeholder","name","lang","required","defaultValue","ChangeLang","onChangeLang","onClick","WordsItem","setContext","props","onSetContext","target","selectedElement","document","querySelector","classList","remove","coords","x","clientX","y","clientY","add","newState","this","currentLang","eng","rus","onChange","onContextMenu","Component","defaultProps","Words","words","map","item","key","id","left","top","ContextMenu","getRef","node","_menu","hideMenu","onHideMenu","calculateCoords","contextProps","windowSize","window","innerWidth","innerHeight","contextMenuSize","offsetHeight","offsetWidth","newTopCoords","pageYOffset","newLeftCoords","pageXOffset","toggleContext","isHidden","removeEventListener","hidden","style","addEventListener","handleSelect","select","onChangeComplexity","onRemove","history","elemId","push","contextMenuItems","Object","keys","i","withRouter","Form","_inputField","handleSubmit","button","classes","join","inputValue","PhrasesList","phrases","onRemovePhrase","length","Modal","children","onHideModal","contains","ModalError","title","replace","PhrasesHeader","word","translation","PhrasesModal","onNewPhrase","isWordFounded","Boolean","phrase","phraseIndex","Complexity","sortedWords","filter","sort","a","b","date","toUpperCase","WordsList","Toggler","condition","open","close","toggleHandler","toggleAdding","Toggleable","TransitionGroup","CSSTransition","timeout","classNames","WordsAmount","amount","Header","wordsSum","ToggleableAdding","NewWord","AddToggler","ChangeLangContainer","getFirstArrayItem","array","findById","compose","String","findByTitle","connect","dispatch","C","addWord","HeaderContainer","changeValue","changeLang","ComplexityContainer","changeWord","ContextMenuContainer","state","contextMenu","easy","medium","hard","newComplexity","changeComplexity","removeWord","Phrases","match","params","addPhrase","wordId","removePhrase","isAdding","SearchForm","query","foundWord","Complexities","App","path","component","action","v4","Date","now","reducers","combineReducers","store","createStore","localStorage","JSON","parse","subscribe","stringify","getState","render","getElementById"],"mappings":"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","file":"static/js/main.54cadd7f.chunk.js","sourcesContent":["export default {\r\n  ADD_WORD: \"ADD_WORD\",\r\n  REMOVE_WORD: \"REMOVE_WORD\",\r\n  CHANGE_WORD: \"CHANGE_WORD\",\r\n  CHANGE_LANGUAGE: \"CHANGE_LANGUAGE\",\r\n  CHANGE_COMPLEXITY: \"CHANGE_COMPLEXITY\",\r\n  SET_CONTEXT: \"SET_CONTEXT\",\r\n  HIDE_CONTEXT: \"HIDE_CONTEXT\",\r\n  ADD_PHRASE: \"ADD_PHRASE\",\r\n  REMOVE_PHRASE: \"REMOVE_PHRASE\",\r\n  TOGGLE_ADDING: \"TOGGLE_ADDING\"\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './stylesheets/AddWordForm.css'\r\n\r\nconst AddWordForm = ({ onNewWord = f => f }) => {\r\n  let _english, _russian, _complexity;  // Access to DOM elements\r\n\r\n  const submit = e => {\r\n    e.preventDefault();\r\n    // Get data from fields\r\n    let engWord = _english.value.toLowerCase().trim();\r\n    let rusWord = _russian.value.toLowerCase().trim();\r\n    let complexity = _complexity.value;\r\n    // Reverse data flow\r\n    onNewWord(engWord, rusWord, complexity);\r\n    // Reset form fields\r\n    _english.value = '';\r\n    _russian.value = '';\r\n    _english.focus();\r\n  }\r\n\r\n  return (\r\n    <form className='addWord-form' onSubmit={submit}>\r\n      <div className='text-fields'>\r\n        <input type='text'\r\n          ref={input => _english = input}\r\n          placeholder=\"English\"\r\n          name='eng-word'\r\n          lang='en'\r\n          required\r\n        />\r\n        <input type='text'\r\n          ref={input => _russian = input}\r\n          placeholder=\"Russian\"\r\n          name='rus-word'\r\n          lang='ru'\r\n          required\r\n        />\r\n      </div>\r\n      <div className='submit-wrapper'>\r\n        <select\r\n          className='addWord-complexity'\r\n          defaultValue=\"hard\"\r\n          ref={input => _complexity = input}\r\n        >\r\n          <option value='hard'>Hard</option>\r\n          <option value='medium'>Medium</option>\r\n          <option value='easy'>Easy</option>\r\n        </select>\r\n        <button className='addWord-button'>\r\n          ADD\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n// PropTypes\r\nAddWordForm.propTypes = {\r\n  onNewWord: PropTypes.func\r\n}\r\n\r\nexport default AddWordForm","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './stylesheets/ChangeLang.css'\r\n\r\nconst ChangeLang = ({ onChangeLang = f => f }) =>\r\n  <form className='changeLang-form'>\r\n    <button\r\n      type='button'\r\n      className='changeLang-button'\r\n      onClick={() => onChangeLang('eng')}\r\n    >\r\n      English words\r\n      </button>\r\n\r\n    <button\r\n      type='button'\r\n      className='changeLang-button'\r\n      onClick={() => onChangeLang('rus')}\r\n    >\r\n      Russian words\r\n      </button>\r\n  </form>\r\n\r\n// PropTypes\r\nChangeLang.propTypes = {\r\n  onChangeLang: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ChangeLang","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './stylesheets/WordsItem.css'\r\n\r\nclass WordsItem extends Component {\r\n\r\n  shouldComponentUpdate(newState) {\r\n    const { currentLang } = this.props;\r\n\r\n    return (currentLang === newState.currentLang) ? false : true;\r\n  }\r\n\r\n  setContext = e => {\r\n    const { onSetContext, complexity } = this.props;\r\n    const target = e.target;\r\n    const selectedElement = document.querySelector('.selected');\r\n\r\n    if (selectedElement) {  // Remove selected style from previous element\r\n      selectedElement.classList.remove('selected');\r\n    }\r\n    // Event coords\r\n    const coords = {\r\n      x: e.clientX,\r\n      y: e.clientY\r\n    }\r\n\r\n    e.preventDefault();  // Default context menu removing\r\n    target.classList.add('selected');  // Apply styles to the selected element\r\n    // Set context menu based on the current event coords\r\n    onSetContext(coords.x, coords.y, complexity);\r\n  }\r\n\r\n  render() {\r\n    const { eng, rus, currentLang, onChange } = this.props;\r\n\r\n    return (\r\n      <li className='words-item'>\r\n        <button\r\n          type='button'\r\n          className={\r\n            (currentLang === 'eng') ?\r\n              'word english' :\r\n              'word russian'\r\n          }\r\n          onClick={onChange}\r\n          onContextMenu={this.setContext}\r\n        >\r\n          {\r\n            (currentLang === 'eng') ? eng : rus\r\n          }\r\n        </button>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n\r\nWordsItem.propTypes = {\r\n  eng: PropTypes.string,\r\n  rus: PropTypes.string,\r\n  currentLang: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onSetContext: PropTypes.func\r\n}\r\n\r\nWordsItem.defaultProps = {\r\n  eng: \"\",\r\n  rus: \"\",\r\n  currentLang: \"eng\",\r\n  onChange: () => { },\r\n  onSetContext: () => { }\r\n}\r\n\r\nexport default WordsItem","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport WordsItem from './WordsItem'\r\nimport './stylesheets/Words.css'\r\n\r\nconst Words = ({\r\n  words,\r\n  onChange,\r\n  onSetContext,\r\n}) =>\r\n  <ul className='words-list'>\r\n    {\r\n      words.map(item =>\r\n        <WordsItem\r\n          key={item.id}\r\n          {...item}\r\n          onChange={() => onChange(item.id)}\r\n          onSetContext={\r\n            (left, top, complexity) => onSetContext(left, top, item.id, complexity)\r\n          }\r\n        />\r\n      )\r\n    }\r\n  </ul>\r\n\r\nWords.propTypes = {\r\n  words: PropTypes.array,\r\n  onChange: PropTypes.func,\r\n  onSetContext: PropTypes.func,\r\n}\r\n\r\nWords.defaultProps = {\r\n  words: [],\r\n  onChange: () => { },\r\n  onSetContext: () => { },\r\n}\r\n\r\nexport default Words\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './stylesheets/ContextMenu.css'\r\n\r\nclass ContextMenu extends Component {\r\n\r\n  // Ref method\r\n  getRef = (node) => { this._menu = node }\r\n\r\n  // Life cycle \r\n  componentDidUpdate() {\r\n    this.toggleContext();\r\n  }\r\n\r\n  // Context menu handling\r\n  hideMenu = () => {\r\n    let selectedElement = document.querySelector('.selected');\r\n\r\n    if (selectedElement) {\r\n      selectedElement.classList.remove('selected')\r\n    }\r\n\r\n    this.props.onHideMenu();\r\n  }\r\n\r\n  // Context menu coords related on window sizing\r\n  calculateCoords = () => {\r\n    const { left, top } = this.props.contextProps;\r\n    // Window size\r\n    const windowSize = {\r\n      x: window.innerWidth,\r\n      y: window.innerHeight\r\n    }\r\n    // Context menu size\r\n    const contextMenuSize = {\r\n      height: this._menu.offsetHeight,\r\n      width: this._menu.offsetWidth\r\n    }\r\n    // New coords\r\n    let newTopCoords = top + window.pageYOffset;\r\n    let newLeftCoords = left + window.pageXOffset;\r\n    // Positioning by the window top edge \r\n    if (top + contextMenuSize.height + 10 > windowSize.y) {\r\n      newTopCoords -= contextMenuSize.height;\r\n    }\r\n    // Positioning by the window left edge \r\n    if (left + contextMenuSize.width + 10 > windowSize.x) {\r\n      newLeftCoords -= contextMenuSize.width;\r\n    }\r\n\r\n    return {\r\n      x: newLeftCoords,\r\n      y: newTopCoords\r\n    }\r\n  }\r\n\r\n  toggleContext = () => {\r\n    const { isHidden } = this.props.contextProps;\r\n    const { x, y } = this.calculateCoords();  // Get current coords\r\n\r\n    if (isHidden) {  // Meke menu invisible\r\n      window.removeEventListener('click', this.hideMenu);\r\n      this._menu.hidden = true;\r\n      return;\r\n    }\r\n    \r\n    this._menu.hidden = isHidden;\r\n    // Set menu coords\r\n    this._menu.style.left = x + 'px';\r\n    this._menu.style.top = y + 'px';\r\n    // Set menu's close listener to window\r\n    window.addEventListener('click', this.hideMenu);\r\n  }\r\n\r\n  handleSelect = select => {\r\n    const {\r\n      onChangeComplexity,\r\n      onRemove,\r\n      contextProps,\r\n      history\r\n    } = this.props;\r\n\r\n    const { elemId } = contextProps;  // Context menu target id \r\n\r\n    switch (select) {\r\n      case \"remove\":\r\n        onRemove(elemId);\r\n        break;\r\n\r\n      case \"phrases\":\r\n        history.push(`/phrases/${elemId}`)\r\n        break;\r\n\r\n      default:\r\n        onChangeComplexity(select, elemId)\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { contextMenuItems, contextProps } = this.props;\r\n    const { complexity } = contextProps;\r\n    const { isHidden } = contextProps;\r\n\r\n    return (\r\n      <div\r\n        className={\r\n          (isHidden) ?\r\n            'contextMenu-wrapper' :\r\n            'contextMenu-wrapper active'\r\n        }\r\n        ref={this.getRef}\r\n      >\r\n        <ul className='contextMenu-list'>\r\n          {\r\n            Object.keys(contextMenuItems).map((key, i) =>\r\n              key !== complexity &&  // Remove current complexity from menu\r\n              <li\r\n                key={i}\r\n                onClick={() => this.handleSelect(key)}\r\n              >\r\n                <button\r\n                  type='button'\r\n                  className='contextMenu-item'\r\n                >\r\n                  {contextMenuItems[key]}\r\n                </button>\r\n              </li>\r\n            )\r\n          }\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nContextMenu.propTypes = {\r\n  contextProps: PropTypes.object,\r\n  contextMenuItems: PropTypes.object,\r\n  onChangeComplexity: PropTypes.func,\r\n  onRemove: PropTypes.func,\r\n  onHideMenu: PropTypes.func,\r\n}\r\n\r\nContextMenu.defaultProps = {\r\n  contextProps: {},\r\n  contextMenuItems: {},\r\n  onChangeComplexity: () => { },\r\n  onRemove: () => { },\r\n  onHideMenu: () => { },\r\n}\r\n\r\nexport default withRouter(ContextMenu)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './stylesheets/Form.css'\r\n\r\nconst Form = ({\r\n  handleSubmit, placeholder, button, className\r\n}) => {\r\n\r\n  let _inputField;  // Access to input's DOM element\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const inputValue = _inputField.value;\r\n    // Change state with input value\r\n    handleSubmit(inputValue);\r\n    // Reset form value\r\n    _inputField.value = '';\r\n    _inputField.focus();\r\n  }\r\n\r\n  const classes = ['add-form', className].join(\" \");\r\n\r\n  return (\r\n    <form\r\n      onSubmit={submit}\r\n      className={classes}\r\n    >\r\n      <input\r\n        type='text'\r\n        placeholder={placeholder}\r\n        ref={input => _inputField = input}\r\n        required\r\n      />\r\n      <button>{button}</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nForm.propTypes = {\r\n  placeholder: PropTypes.string,\r\n  button: PropTypes.string,\r\n  className: PropTypes.string,\r\n  handleSubmit: PropTypes.func,\r\n}\r\n\r\nForm.defaultProps = {\r\n  placeholder: 'Input text here',\r\n  button: 'Ok',\r\n  className: '',\r\n  handleSubmit: () => { },\r\n}\r\n\r\nexport default Form","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './stylesheets/PhrasesList.css'\r\n\r\nconst PhrasesList = ({ \r\n  phrases = [], \r\n  onRemovePhrase = f => f \r\n}) =>\r\n  (!phrases.length) ?\r\n    <p className='empty'>No phrases in the list</p> :\r\n    <div className='phrases-wrapper'>\r\n      <ul className='phrases-list'>\r\n        {\r\n          phrases.map((item, i) =>\r\n            <li className='phrases-item' key={i}>\r\n              <span>{item}</span>\r\n              <span className='phrases-item-remove'\r\n                onClick={() => onRemovePhrase(i)}>\r\n                &times;\r\n              </span>\r\n            </li>\r\n          )\r\n        }\r\n      </ul>\r\n    </div>\r\n\r\nPhrasesList.propTypes = {\r\n  phrases: PropTypes.arrayOf(PropTypes.string),\r\n  onRemovePhrase: PropTypes.func\r\n}\r\n\r\nexport default PhrasesList\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './stylesheets/Modal.css'\r\n\r\nconst Modal = ({\r\n  children,\r\n  onHideModal = f => f\r\n}) => {\r\n\r\n  const handleOverlayClick = e => {\r\n    let target = e.target;\r\n\r\n    if (!target.classList.contains(\"modal-overlay\")) return;\r\n\r\n    onHideModal();\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"modal-overlay\"\r\n      onClick={handleOverlayClick}\r\n    >\r\n      <div className=\"modal-content\">\r\n        <button\r\n          type='button'\r\n          onClick={onHideModal}\r\n          className=\"modal-content-close\"\r\n        >\r\n          &times;\r\n        </button>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.node,\r\n  onHideModal: PropTypes.func\r\n}\r\n\r\nexport default Modal;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Modal from './Modal'\r\n\r\nconst ModalError = ({ \r\n  title = '', \r\n  history = {} \r\n}) =>\r\n  <Modal onHideModal={() => history.replace('/')}>\r\n    <h1>{title}</h1>\r\n  </Modal>\r\n\r\nModalError.propTypes = {\r\n  title: PropTypes.string,\r\n  history: PropTypes.object\r\n}\r\n\r\nexport default ModalError\r\n","import React from 'react'\r\nimport './stylesheets/PhrasesHeader.css'\r\n\r\nconst PhrasesHeader = ({ word, translation }) => \r\n  <h1 className=\"phrases-header\">\r\n    <span>{word}</span>\r\n    <br />\r\n    <span>{translation}</span>\r\n  </h1>\r\n\r\nexport default PhrasesHeader","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Form from './Form'\r\nimport PhrasesList from './PhrasesList'\r\nimport Modal from './Modal'\r\nimport ModalError from './ModalError'\r\nimport PhrasesHeader from './PhrasesHeader'\r\nimport { withRouter } from 'react-router-dom'\r\nimport './stylesheets/PhrasesModal.css'\r\n\r\nconst PhrasesModal = ({\r\n  word,\r\n  history,\r\n  onNewPhrase,\r\n  onRemovePhrase\r\n}) => {\r\n\r\n  const isWordFounded = Boolean(Object.keys(word).length);\r\n\r\n  return (\r\n    (!isWordFounded) ?\r\n      <ModalError\r\n        title=\"Word not found\"\r\n        history={history}\r\n      /> :\r\n      <Modal onHideModal={() => history.replace('/')}>\r\n        <>\r\n          <PhrasesHeader\r\n            word={word.eng}\r\n            translation={word.rus}\r\n          />\r\n          <Form\r\n            handleSubmit={phrase => onNewPhrase(phrase, word.id)}\r\n            className='phrases-add-form'\r\n            button=\"ADD\"\r\n            placeholder='Add phrase' />\r\n          {\r\n            (isWordFounded) &&\r\n            <PhrasesList\r\n              phrases={word.phrases}\r\n              onRemovePhrase={(phraseIndex) => onRemovePhrase(word.id, phraseIndex)} />\r\n          }\r\n        </>\r\n      </Modal>\r\n  )\r\n}\r\n\r\nPhrasesModal.propTypes = {\r\n  word: PropTypes.object,\r\n  history: PropTypes.object,\r\n  onNewPhrase: PropTypes.func,\r\n  onRemovePhrase: PropTypes.func\r\n}\r\n\r\nPhrasesModal.defaultProps = {\r\n  word: {},\r\n  onNewPhrase: () => { },\r\n  onRemovePhrase: () => { }\r\n}\r\n\r\nexport default withRouter(PhrasesModal)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { WordsList } from './Containers'\r\nimport './stylesheets/Complexity.css'\r\n\r\nconst Complexity = ({\r\n  title = \"unknown\",\r\n  words = [],\r\n}) => {\r\n  // Filter by complexity\r\n  const filteredWords = words.filter(item => item.complexity === title);\r\n  // Sort by date\r\n  const sortedWords = filteredWords.sort((a, b) => a.date - b.date);\r\n  \r\n  return (\r\n    <div className='complexity'>\r\n      <h1 className='complexity-caption'>{title.toUpperCase()}</h1>\r\n      {\r\n        (!sortedWords.length) ?\r\n          <p className='complexity-empty empty'>\r\n            Empty\r\n          </p> :\r\n          <WordsList\r\n            words={sortedWords}\r\n          />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nComplexity.propTypes = {\r\n  title: PropTypes.string,\r\n  words: PropTypes.array\r\n}\r\n\r\nexport default Complexity","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './stylesheets/Toggler.css'\r\n\r\nconst Toggler = ({\r\n  condition,\r\n  open, \r\n  close,\r\n  toggleHandler,\r\n  className\r\n}) => \r\n  <button\r\n    onClick={toggleHandler}\r\n    className={className}\r\n  >\r\n    {\r\n      condition? close: open\r\n    }\r\n  </button>\r\n\r\n// Prop Types \r\nToggler.propTypes = {\r\n  condition: PropTypes.bool,\r\n  open: PropTypes.string,\r\n  close: PropTypes.string,\r\n  className: PropTypes.string,\r\n  toggleAdding: PropTypes.func\r\n}\r\n\r\nToggler.defaultProps = {\r\n  condition: false,\r\n  open: \"+\",\r\n  close: \"×\",\r\n  className: \"\",\r\n  toggleAdding: () => {}\r\n}\r\n\r\nexport default Toggler","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport './stylesheets/Toggleable.css'\r\n\r\nconst Toggleable = ({\r\n  condition = false,\r\n  className = \"\",\r\n  children,\r\n}) =>\r\n  <TransitionGroup className={className}>\r\n    {\r\n      condition && (\r\n        <CSSTransition\r\n          timeout={500}\r\n          classNames='slide-down'\r\n        >\r\n          {children}\r\n        </CSSTransition>\r\n      )\r\n    }\r\n  </TransitionGroup>\r\n\r\n\r\nToggleable.propTypes = {\r\n  condition: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default Toggleable","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './stylesheets/WordsAmount.css'\r\n\r\nconst WordsAmount = ({ amount = 0, title = \"\"}) =>\r\n  <span className='words-amount'>\r\n    {title} {amount}\r\n  </span>\r\n\r\nWordsAmount.propTypes = {\r\n  amount: PropTypes.number,\r\n  title: PropTypes.string\r\n}\r\n\r\nexport default WordsAmount","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  AddToggler,\r\n  ChangeLangContainer,\r\n  ToggleableAdding,\r\n  NewWord,\r\n  SearchForm\r\n} from './Containers'\r\nimport WordsAmount from './WordsAmount'\r\nimport './stylesheets/Header.css'\r\nimport './stylesheets/SearchForm.css'\r\n\r\nconst Header = ({ wordsSum = 0 }) =>\r\n  <header className='header'>\r\n    <ToggleableAdding className=\"adding-wrapper\">\r\n      <NewWord />\r\n    </ToggleableAdding>\r\n    <AddToggler className=\"adding-toggler\" />\r\n    <ChangeLangContainer />\r\n    <SearchForm />\r\n    <WordsAmount\r\n      amount={wordsSum}\r\n      title=\"Words amount:\"\r\n    />\r\n  </header>\r\n\r\nHeader.propTypes = {\r\n  words: PropTypes.array\r\n}\r\n\r\nexport default Header","import { compose } from 'redux'\r\n\r\nexport const getFirstArrayItem = array => array[0]\r\n\r\n// Filter and find by id\r\nexport const filterArrayById = (array, id) => \r\n  array.filter(item => String(item.id) === id)\r\n \r\nexport const findById = compose(\r\n  getFirstArrayItem,\r\n  filterArrayById \r\n)\r\n\r\n// Filter and find by title\r\nexport const filterArrayByTitle = (array, title) =>\r\n  array.filter(\r\n    item => item.eng === title || item.rus === title\r\n  )\r\n\r\nexport const findByTitle = compose(\r\n  getFirstArrayItem,\r\n  filterArrayByTitle\r\n)","import { connect } from 'react-redux'\r\nimport {\r\n  addWord,\r\n  changeWord,\r\n  changeLang,\r\n  setContext,\r\n  changeComplexity,\r\n  removeWord,\r\n  hideContext,\r\n  addPhrase,\r\n  removePhrase,\r\n  toggleAdding\r\n} from '../redux/actionCreators'\r\nimport AddWordForm from './AddWordForm'\r\nimport ChangeLang from './ChangeLang'\r\nimport Words from './Words'\r\nimport ContextMenu from './ContextMenu'\r\nimport PhrasesModal from './PhrasesModal'\r\nimport Complexity from './Complexity'\r\nimport Toggler from './Toggler'\r\nimport Toggleable from './Toggleable'\r\nimport Header from './Header'\r\nimport { findById, findByTitle } from '../lib/array-helpers'\r\nimport Form from './Form'\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n//Add Word Form\r\nexport const NewWord = connect(\r\n  null,\r\n  dispatch => ({\r\n    onNewWord(eng, rus, complexity) {\r\n      dispatch(addWord(eng, rus, complexity))\r\n    }\r\n  })\r\n)(AddWordForm)\r\n\r\n// SearchForm\r\nexport const HeaderContainer = connect(\r\n  ({ words }) => ({\r\n    wordsSum: words.length\r\n  })\r\n)(Header)\r\n\r\n//Change Language Form\r\nexport const ChangeLangContainer = connect(\r\n  null,\r\n  dispatch => ({\r\n    onChangeLang(changeValue) {\r\n      dispatch(changeLang(changeValue))\r\n    }\r\n  })\r\n)(ChangeLang)\r\n\r\n//Complexity \r\nexport const ComplexityContainer = connect(\r\n  ({ words }, { title }) => ({\r\n    words,\r\n    title\r\n  })\r\n)(Complexity)\r\n\r\n//Words List\r\nexport const WordsList = connect(\r\n  null,\r\n  dispatch => ({\r\n    onChange(id) {\r\n      dispatch(changeWord(id))\r\n    },\r\n    onSetContext(left, top, id, complexity) {\r\n      dispatch(setContext(left, top, id, complexity))\r\n    }\r\n  })\r\n)(Words)\r\n\r\n//Context Menu\r\nexport const ContextMenuContainer = connect(\r\n  state => ({\r\n    contextProps: state.contextMenu,\r\n    contextMenuItems: {\r\n      easy: \"Add to easy\",\r\n      medium: \"Add to medium\",\r\n      hard: \"Add to hard\",\r\n      phrases: \"Phrases\",\r\n      remove: \"Remove\"\r\n    }\r\n  }),\r\n  dispatch => ({\r\n    onChangeComplexity(newComplexity, id) {\r\n      dispatch(changeComplexity(newComplexity, id))\r\n    },\r\n    onRemove(id) {\r\n      dispatch(removeWord(id))\r\n    },\r\n    onHideMenu() {\r\n      dispatch(hideContext())\r\n    }\r\n  })\r\n)(ContextMenu)\r\n\r\n// PhrasesModal\r\nexport const Phrases = connect(\r\n  ({ words }, { match }) => ({\r\n    word: findById(words, match.params.id),\r\n  }),\r\n  dispatch => ({\r\n    onNewPhrase(phrase, id) {\r\n      dispatch(addPhrase(phrase, id))\r\n    },\r\n    onRemovePhrase(wordId, phraseIndex) {\r\n      dispatch(removePhrase(wordId, phraseIndex))\r\n    }\r\n  })\r\n)(PhrasesModal)\r\n\r\n// Add Toggler\r\nexport const AddToggler = connect(\r\n  ({ isAdding }, { className }) => ({\r\n    condition: isAdding,\r\n    open: \"+\",\r\n    close: \"×\",\r\n    className\r\n  }),\r\n  dispatch => ({\r\n    toggleHandler() {\r\n      dispatch(toggleAdding())\r\n    }\r\n  })\r\n)(Toggler)\r\n\r\n// Toggleable Adding\r\nexport const ToggleableAdding = connect(\r\n  ({ isAdding }, { className }) => ({\r\n    condition: isAdding,\r\n    className\r\n  })\r\n)(Toggleable)\r\n\r\n// Search Form\r\nexport const SearchForm = withRouter(\r\n  connect(\r\n    ({ words }, { history }) => {\r\n      const handleSubmit = (query) => {  // Searching function\r\n        const foundWord = findByTitle(words, query.toLowerCase());\r\n\r\n        (foundWord) ?\r\n          history.push(`/phrases/${foundWord.id}`) :\r\n          history.push(`/phrases/${query}`)\r\n      }\r\n\r\n      return {\r\n        handleSubmit,\r\n        className: 'search-form',\r\n        placeholder: 'Search word',\r\n        button: 'Search'\r\n      }\r\n    }\r\n  )(Form)\r\n)","import C from './constants'\r\n\r\n// Word actions\r\nexport const addWord = (eng, rus, complexity) => ({\r\n  type: C.ADD_WORD,\r\n  eng,\r\n  rus,\r\n  complexity\r\n})\r\n\r\nexport const removeWord = id => ({\r\n  type: C.REMOVE_WORD,\r\n  id\r\n})\r\n\r\nexport const changeWord = id => ({\r\n  type: C.CHANGE_WORD,\r\n  id\r\n})\r\n\r\nexport const changeLang = changeValue => ({\r\n  type: C.CHANGE_LANGUAGE,\r\n  changeValue\r\n})\r\n\r\nexport const changeComplexity = (newComplexity, id) => ({\r\n  type: C.CHANGE_COMPLEXITY,\r\n  complexity: newComplexity,\r\n  id\r\n})\r\n\r\n// Context actions\r\nexport const setContext = (left, top, id, complexity) => ({\r\n  type: C.SET_CONTEXT,\r\n  left,\r\n  top,\r\n  id,\r\n  complexity\r\n})\r\n\r\nexport const hideContext = () => ({\r\n  type: C.HIDE_CONTEXT\r\n})\r\n\r\n// Phrases actions\r\nexport const addPhrase = (phrase, id) => ({\r\n  type: C.ADD_PHRASE,\r\n  phrase,\r\n  id\r\n})\r\n\r\nexport const removePhrase = (wordId, phraseIndex) => ({\r\n  type: C.REMOVE_PHRASE,\r\n  wordId,\r\n  phraseIndex\r\n})\r\n\r\n// Other actions\r\nexport const toggleAdding = () => ({\r\n  type: C.TOGGLE_ADDING\r\n})\r\n\r\n\r\n","import React from 'react'\r\nimport { ComplexityContainer } from './Containers'\r\n\r\nconst Complexities = () =>\r\n  <main className='complexities'>\r\n    <ComplexityContainer title='hard' />\r\n    <ComplexityContainer title='medium' />\r\n    <ComplexityContainer title='easy' />\r\n  </main>\r\n\r\nexport default Complexities\r\n","import React from 'react'\r\nimport {\r\n  ContextMenuContainer,\r\n  Phrases,\r\n  HeaderContainer\r\n} from './Containers'\r\nimport Complexities from './Complexities'\r\nimport { Route } from 'react-router-dom'\r\nimport './stylesheets/App.css'\r\n\r\nconst App = () =>\r\n  <Route path='/' component={() =>\r\n    <div className='wrapper'>\r\n      <HeaderContainer />\r\n      <Complexities />\r\n      <ContextMenuContainer />\r\n      <Route path='/phrases/:id' component={Phrases} />\r\n    </div>\r\n  } />\r\n\r\nexport default App","import C from './constants'\r\nimport { v4 } from 'uuid'\r\n\r\n// Word reducer\r\n\r\nexport const word = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case C.ADD_WORD:\r\n      return {\r\n        id: v4(),\r\n        eng: action.eng,\r\n        rus: action.rus,\r\n        currentLang: 'eng',\r\n        complexity: action.complexity,\r\n        phrases: [],\r\n        date: Date.now()\r\n      }\r\n\r\n    case C.CHANGE_WORD:\r\n      return (state.id !== action.id) ?\r\n        state :\r\n        {\r\n          ...state,\r\n          currentLang: (state.currentLang === 'eng') ? 'rus' : 'eng'\r\n        }\r\n\r\n    case C.CHANGE_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        currentLang: action.changeValue\r\n      }\r\n\r\n    case C.CHANGE_COMPLEXITY:\r\n      return (state.id !== action.id) ?\r\n        state :\r\n        {\r\n          ...state,\r\n          complexity: action.complexity,\r\n          date: Date.now(),\r\n        }\r\n\r\n    case C.ADD_PHRASE:\r\n      return (state.id !== action.id) ?\r\n        state :\r\n        {\r\n          ...state,\r\n          phrases: [...state.phrases, action.phrase]\r\n        }\r\n\r\n    case C.REMOVE_PHRASE:\r\n      return (state.id !== action.wordId) ?\r\n        state :\r\n        {\r\n          ...state,\r\n          phrases: state.phrases.filter(\r\n            (phrase, i) => i !== action.phraseIndex\r\n          )\r\n        }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// Words reducer\r\n\r\nexport const words = (state = [], action) => {\r\n  switch (action.type) {\r\n    case C.ADD_WORD:\r\n      return [\r\n        ...state,\r\n        word({}, action)\r\n      ]\r\n\r\n    case C.CHANGE_WORD:\r\n    case C.CHANGE_LANGUAGE:\r\n    case C.CHANGE_COMPLEXITY:\r\n    case C.ADD_PHRASE:\r\n    case C.REMOVE_PHRASE:\r\n      return state.map(item => word(item, action))\r\n\r\n    case C.REMOVE_WORD:\r\n      return state.filter(item => item.id !== action.id)\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// ContextMenu reducer\r\n\r\nexport const contextMenu = (\r\n  state = {\r\n    left: 0,\r\n    top: 0,\r\n    elemId: \"0\",\r\n    complexity: \"none\",\r\n    isHidden: true\r\n  }, { \r\n    type, \r\n    left, \r\n    top, \r\n    id: elemId, \r\n    complexity \r\n  }\r\n) => {\r\n  switch (type) {\r\n    case C.SET_CONTEXT:\r\n      return {\r\n        ...state,\r\n        left,\r\n        top,\r\n        elemId,\r\n        complexity,\r\n        isHidden: false\r\n      }\r\n\r\n    case C.HIDE_CONTEXT:\r\n      return {\r\n        ...state,\r\n        isHidden: true\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// isAdding reducer\r\n\r\nexport const isAdding = (state = false, { type }) => {\r\n  switch(type) {\r\n    case C.TOGGLE_ADDING: \r\n      return !state\r\n    \r\n    default: \r\n      return state;\r\n  }\r\n}","import { createStore, combineReducers } from 'redux'\r\nimport { words, contextMenu, isAdding } from './reducers'\r\n\r\n// Make one reducer based on the others\r\nconst reducers = combineReducers({\r\n  words, \r\n  contextMenu,\r\n  isAdding\r\n})\r\n// Create store based on reducers and initial state\r\nconst store = createStore(\r\n  reducers,\r\n  (localStorage['dictionary-words']) ?\r\n    JSON.parse(localStorage['dictionary-words']) :\r\n    {}\r\n);\r\n// Every time that store changes, refresh local storage\r\nstore.subscribe(() => {\r\n  localStorage['dictionary-words'] = JSON.stringify({\r\n    words: store.getState().words\r\n  })\r\n})\r\n\r\nexport default store;","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport App from './components/App'\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux'\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById('react-container')\r\n)\r\n\r\n"],"sourceRoot":""}